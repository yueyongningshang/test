1.多态：
多态是同一个行为具有多个不同表现形式或形态的能力。
例如：现实中，比如我们按下 F1 键这个动作：
如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；
如果当前在 Word 下弹出的就是 Word 帮助；
在 Windows 下弹出的就是 Windows 帮助和支持。
同一个事件发生在不同的对象上会产生不同的结果。

多态存在的条件：
继承
重写
父类引用指向子类对象

扩展1：重载：方法名相同，参数不同，返回参数可不同

2.抽象类与接口的选择
接口和抽象类的概念不一样。接口是对动作的抽象，抽象类是对根源的抽象。
抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。比如，男人，女人，这两个类（如果是类的话……），他们的抽象类是人。说明，他们都是人。
人可以吃东西，狗也可以吃东西，你可以把“吃东西”定义成一个接口，然后让这些类去实现它.
所以，在高级语言上，一个类只能继承一个类（抽象类）(正如人不可能同时是生物和非生物)，但是可以实现多个接口(吃饭接口、走路接口)。
第一点． 接口是抽象类的变体，接口中所有的方法都是抽象的。而抽象类是声明方法的存在而不去实现它的类。
第二点． 接口可以多继承，抽象类不行
第三点． 接口定义方法，不能实现，而抽象类可以实现部分方法。
第四点． 接口中基本数据类型为static 而抽类象不是的。
当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。
抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的
所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。

3.抽象类与接口的区别
参数				抽象类								接口
默认的方法实现	可以有非抽象方法						完全抽象，必须实现
				不重写，但多态可以访问

实现方式			子类用extends关键字来继承抽象类，		子类用implements去实现接口，需要实现接口中所有方法
				如果子类不是抽象类的话，它需要实现
				父级抽象类中所有抽象方法，父类中非
				抽象方法可重写也可不重写

构造方法			可以有，且不能用abstract修饰			不能有

实例化			抽象类不能new实例化

访问修饰符		可以用public、protected、default		默认public。属性为public static final x = "必须有默认值"

添加新方法		如果在抽象类中添加新非abstract的方法	只要在接口中添加方法，实现它的类就要改变，去实现这个新添加的方法
				可以直接添加，因为非abstract方法无需
				在子类中实现，如果是abstact方法，则需
				要改变子类的代码，也要实现这个方法
					
				