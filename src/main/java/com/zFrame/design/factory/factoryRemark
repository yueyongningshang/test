一、工厂模式
工厂方法模式：工厂方法模式定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。

开放-关闭原则（开闭原则）： 用抽象构建架构，用实现扩展细节。
PS：讲人话就是不修改源代码。

1.简单工厂：一个工厂类，一个产品抽象类。
不用管产品是什么，将所有产品放到一个产品中生产。

2.工厂方法：多个工厂类，一个产品抽象类。
工厂模式就是一个工厂只生产一样产品。

3.抽象工厂：多个工厂类，多个产品抽象类。

写代码：
简单工厂：先创建接口方法。然后构建实现接口方法实现类，创建工厂
工厂：先创建接口方法。然后构建实现接口方法实现类，创建总工厂返回产品。

例子：
1.工厂模式
问题：现有电脑产品windows和apple，请试用工厂模式描述该场景。

2.抽象工厂模式
问题：现有电脑产品配件厂商基于windows和apple生产不同类型的CPU和RAM，请试用抽象工厂模式描述该场景。

问题分析：
Windows产品包含WindowsCPU和WindowsRAM，
Apple产品包含AppleCPU和AppleRAM，
或者说是CPU包含Windows型和Apple型，RAM包含Windows型和Apple型。

如果是工厂模式，则会创建四个工厂类，分别生产四个产品：WindowsCPU，AppleCPU，WindowsRAM，AppleRAM。

如果是抽象工厂模式，则只需要创建两个工厂类,将这四个产品两两组合（即一个工厂生产多种产品）：
工厂1：WindowsCPU，WindowsRAM。工厂2：AppleCPU，AppleRAM
工厂1：WindowsCPU，AppleCPU。工厂2：WindowsRAM，AppleRAM
工厂1：WindowsCPU，AppleRAM。工厂2：AppleCPU，WindowsRAM

所以抽象工厂模式其实可以对应数学上的组合方式
x包含x1,x2,x3
y包含y1,y2,y3
任意抽出2个，C（6,2）=15种组合，你可以根据这15种组合选择判断创几个工厂比较合适。

思路：

1. 我选择创建两个接口CPU，RAM，分别创建WindowsCPU，WindowsRAM，AppleCPU，AppleRAM四个类来分别实现对应接口。


例子：https://blog.csdn.net/qq_36445854/article/details/88700477
文档：https://blog.csdn.net/qq_36445854/article/details/88743994

